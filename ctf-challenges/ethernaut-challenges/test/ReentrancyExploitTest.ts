import { ethers } from "hardhat";
import { Reentrance as ReentranceContractTarget, ReentranceExploit as ReentranceExploitContract } from "../gen/types" 
import { expect } from "chai";

describe("Reentrency Exploit", () => {
    let targetContract: ReentranceContractTarget;
    let attackerContract: ReentranceExploitContract;

    let victimAddress: string;


    beforeEach("Setup Target Contract", async () => {
        const [victim] = await ethers.getSigners();

        let targetContractFactory = await ethers.getContractFactory("Reentrance");
        let attackerContractFactory = await ethers.getContractFactory("ReentranceExploit");

        targetContract = await targetContractFactory.deploy();
        attackerContract = await attackerContractFactory.deploy(targetContract.address, {value: ethers.utils.parseEther("1.0")});
        victimAddress = await victim.getAddress();
    })

    it("should drain funds from target", async () => {

        // Victim sends funds to target address
        await targetContract.donate(victimAddress, {value: ethers.utils.parseEther("1")})

        // drain address
        await attackerContract.attack();

        // victim should fail to withdraw
        try {
            await targetContract.withdraw(ethers.utils.parseEther("1"))
        } catch(err) {
            expect(err.message).to.not.be.empty
        }
    })
})